# tasks.yaml
tasks:
  search_task:
    context: "Initial threat intelligence gathering phase"
    description: |
      Search for the latest cybersecurity threats related to: {initial_query}
      Use only the following sources: {sources}
      Gather comprehensive information as per the EmergingThreat model, including threat names, descriptions, IoCs, TTPs, threat actors, campaigns, CVEs, and all other relevant data points.
    expected_output: |
      A structured report containing:
      1. A list of identified threats related to the query
      2. Detailed information for each threat, following the EmergingThreat model structure
      3. URLs and references for each piece of information
      4. Any gaps or uncertainties in the gathered data, clearly marked for further investigation
    agent: osint_analyst

  validation_task:
    context: "Verification and validation of gathered threat intelligence"
    description: |
      Thoroughly validate and verify the threat intelligence gathered by the OSINT Analyst.
      Ensure all data points are accurate, consistent, and properly formatted.
      Cross-reference information with known reliable sources.
      Assign or verify confidence scores for each piece of information.
    expected_output: |
      A validated threat intelligence report containing:
      1. Verified information for each identified threat
      2. Confidence scores for each data point
      3. Any corrections or adjustments made during validation
      4. Flagged inconsistencies or potential false positives
      5. A list of any information that could not be verified, with explanations
    agent: validation_agent

  graph_creation_task:
    context: "Creation and updating of the threat intelligence knowledge graph"
    description: |
      Create a new knowledge graph in Neo4j based on the validated threat intelligence.
      Parse the information into entities, attributes, and relationships.
      Ensure the graph structure adheres to the EmergingThreat model.
      Create all necessary nodes and relationships with appropriate labels and properties.
    expected_output: |
      1. Confirmation of a new knowledge graph created in Neo4j
      2. A summary of the graph structure, including:
         - Total number of nodes created (by type)
         - Total number of relationships created (by type)
         - Any potential anomalies or issues encountered during creation
      3. The graph ID and instructions on how to query the new graph in Neo4j Browser
      4. A list of any data that could not be incorporated into the graph, with explanations
    agent: knowledge_graph_agent

  summary_task:
    context: "Generation of a comprehensive threat intelligence summary"
    description: |
      Create a detailed summary report of the newly discovered and graphed threat intelligence.
      Highlight key findings, potential impacts, and recommended actions.
      Include visualizations or charts if possible to represent the threat landscape.
    expected_output: |
      A comprehensive report containing:
      1. Executive summary of key findings
      2. Detailed breakdown of each identified threat
      3. Potential impacts on various sectors or systems
      4. Recommended mitigation strategies and actions
      5. Visualizations of the threat landscape (if possible)
      6. References to the Neo4j graph for further exploration
    agent: knowledge_graph_agent

  output_task:
    context: "Exporting threat intelligence in various formats"
    description: |
      Export the verified and graphed threat intelligence in JSON, CSV, and HTML formats.
      Ensure all exports contain the full range of information from the EmergingThreat model.
      Structure the exports in a clear, easily parseable format.
    expected_output: |
      1. A JSON file containing the full threat intelligence data
      2. A CSV file with a flattened version of the threat intelligence data
      3. An HTML file presenting the threat intelligence in a human-readable format
      4. Confirmation of successful file creation and their locations
    agent: validation_agent